var documenterSearchIndex = {"docs":
[{"location":"public_api/#Public-API-1","page":"Public API","title":"Public API","text":"","category":"section"},{"location":"public_api/#Access-the-application-1","page":"Public API","title":"Access the application","text":"","category":"section"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"]dev https://github.com/uva-bi-sdad/GitHubAPI.jl","category":"page"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"GitHubAPI","category":"page"},{"location":"public_api/#GitHubAPI","page":"Public API","title":"GitHubAPI","text":"GitHubAPI\n\nModule used by the Social Decision and Analytics Division (SDAD) of the Biocomplexity Institute and Initiative of the University of Virginia.\n\nThis module was designed for the Open-Source Software (OSS) project.\n\n\n\n\n\n","category":"module"},{"location":"public_api/#Set-up-your-config-file-(confs/config.simple)-1","page":"Public API","title":"Set up your config file (confs/config.simple)","text":"","category":"section"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"sdad_setup!","category":"page"},{"location":"public_api/#GitHubAPI.sdad_setup!","page":"Public API","title":"GitHubAPI.sdad_setup!","text":"sdad_setup!(;db_user::AbstractString = \"\",\n             db_pwd::AbstractString = \"\",\n             github_login::AbstractString = \"\",\n             github_token::AbstractString = \"\")\n\nThis function writes the configurations to confs/config.simple\n\nArguments\n\ndb_user: Your username for the postgis_1 database (i.e., your UVA computing ID).\ndb_pwd: The password for the postgis_1 database.\ngithub_login: Your GitHub login (handle).\ngithub_token: A 40 alphanumeric characters string. Obtain a GitHub personal access token here.\n\nExamples\n\nGood!\n\njulia> sdad_setup!(db_user = \"jbs3hp\",\n                   db_pwd = \"MyVerySafePwd\",\n                   github_login = \"Nosferican\",\n                   github_token = \"0ipg0jvonteb54lv7j6cbgwn2snq3d3ac1pthxvz\")\nðŸ˜ƒ\n\nIncomplete!\n\njulia> sdad_setup!(db_user = \"jbs3hp\",\n                   db_pwd = \"MyVerySafePwd\",\n                   github_login = \"Nosferican\")\nWarning: github_login has not been defined.\nðŸ˜ž\n\nUpdating the configuration file.\n\njulia> using GitHubAPI\njulia> sdad_setup!(db_user = \"jbs3hp\",\n                   db_pwd = \"MyVerySafePwd\",\n                   github_login = \"Nosferican\",\n                   github_token = \"0ipg0jvonteb54lv7j6cbgwn2snq3d3ac1pthxvz\")\njulia> exit()\n> julia\njulia> using GitHubAPI # config up-to-date\n\nnote: Note\nUpdating the configuration file requires a restart of the session.\n\nUpdating the GitHub personal access token\n\nPermanent through the configuration file\n\njulia> sdad_setup!(github_token = \"0ipg0jvonteb54lv7j6cbgwn2snq3d3ac1pthxvz\")\nðŸ˜ƒ\n\nTemporarily\n\nGitHubAPI.github_token = \"0ipg0jvonteb54lv7j6cbgwn2snq3d3ac1pthxvz\" # new value\n\nnote: Note\nThis method is temporary and will note overwrite the configuration file. Only the GitHub personal access token is allowed to be modified temporarily.\n\n\n\n\n\n","category":"function"},{"location":"public_api/#Identify-some-license-which-has-not-been-scrapped-yet.-1","page":"Public API","title":"Identify some license which has not been scrapped yet.","text":"","category":"section"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"The tables in the database related to monitoring the progress of the task are","category":"page"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"universe.github_repos\nuniverse.github_repos_tracker","category":"page"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"get_licenses","category":"page"},{"location":"public_api/#GitHubAPI.get_licenses","page":"Public API","title":"GitHubAPI.get_licenses","text":"get_licenses()::Vector{String}\n\nList of SPDX ID for every OSI-approved license. (source: SPDX)\n\n\n\n\n\n","category":"function"},{"location":"public_api/#Run-the-scrapper-1","page":"Public API","title":"Run the scrapper","text":"","category":"section"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"parse_repos!\nparse_commits!","category":"page"},{"location":"public_api/#GitHubAPI.parse_repos!","page":"Public API","title":"GitHubAPI.parse_repos!","text":"parse_repos!(license::AbstractString,\n             created_at::AbstractString = \"2007-10-29T14:37:16+00:00\",\n             until::ZonedDateTime = until)\nparse_repos!(license::AbstractString,\n             data,\n             as_of,\n             created_at::AbstractString = \"2007-10-29T14:37:16+00:00\",\n             until::ZonedDateTime = until)\n\nFor one a given license, it collects the information for each repository.\n\nArguments\n\nlicense is a SPDX identifier for some OSI-approved license.\ncreated_at is a datetime interval that GitHub supports (docs)\nuntil: this value is the end-date for the queries (GitHubAPI.until)\n\nExamples\n\nStart querying for all the repositories with license zlib.\n\nparse_repos!(\"zlib\")\n\nAfter checking the github_repos_tracker,\n\nIf the license scrapper already has completed some work, you can resume the job by passing the created_at argument.\n\nparse_repos!(\"zlib\",\n             \"2016-04-20T15:59:13+00:00..2017-12-17T09:59:36+00:00\")\n\n\n\n\n\n","category":"function"},{"location":"public_api/#GitHubAPI.parse_commits!","page":"Public API","title":"GitHubAPI.parse_commits!","text":"parse_commits!(slug::AbstractString, until::AbstractString)\nparse_commits!(slug::AbstractString, until::ZonedDateTime = until)\n\nWrites to the database all the commit history for that repository.\n\nExamples\n\nQuery one repository.\n\nparse_commits!(\"uva-bi-sdad/GitHubAPI.jl\")\n\nFor resuming work, find the date of the oldest commit in the database.\n\nparse_commits!(\"uva-bi-sdad/GitHubAPI.jl\", \"2019-01-01 15:30:00+00\")\n\n\n\n\n\n","category":"function"},{"location":"private_api/#Internals-1","page":"Private API","title":"Internals","text":"","category":"section"},{"location":"private_api/#Database-1","page":"Private API","title":"Database","text":"","category":"section"},{"location":"private_api/#","page":"Private API","title":"Private API","text":"GitHubAPI.db_host\nGitHubAPI.db_port\nGitHubAPI.dbname\nGitHubAPI.db_pwd\nGitHubAPI.db_user\nGitHubAPI.postgis_dtf\nGitHubAPI.dbconnect\nGitHubAPI.insert_record_repos_by_license!\nGitHubAPI.insert_commit!","category":"page"},{"location":"private_api/#GitHubAPI.db_host","page":"Private API","title":"GitHubAPI.db_host","text":"db_host = \"sdad.policy-analytics.net\"\n\nHost for the database.\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.db_port","page":"Private API","title":"GitHubAPI.db_port","text":"db_port = 5434\n\nPort for the postgis_1 in the database.\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.dbname","page":"Private API","title":"GitHubAPI.dbname","text":"dbname = \"oss\"\n\nDatabase for the Open-Source Software project.\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.db_pwd","page":"Private API","title":"GitHubAPI.db_pwd","text":"db_pwd::String\n\nThe password for the database.\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.db_user","page":"Private API","title":"GitHubAPI.db_user","text":"db_user::String\n\nThe username for the database (i.e., your UVA computing ID).\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.postgis_dtf","page":"Private API","title":"GitHubAPI.postgis_dtf","text":"postgis_dtf = dateformat\"yyyy-mm-dd HH:MM:SSzzzz\"\n\nHTTP responses require this datetime format.\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.dbconnect","page":"Private API","title":"GitHubAPI.dbconnect","text":"dbconnect()::Connection\n\nReturns a connection to the postgis_1 OSS database (i.e., your UVA computing ID).\n\nExample\n\nconn = dbconnect()\n\n\n\n\n\n","category":"function"},{"location":"private_api/#GitHubAPI.insert_record_repos_by_license!","page":"Private API","title":"GitHubAPI.insert_record_repos_by_license!","text":"insert_record_repos_by_license!(conn::Connection,\n                                license::AbstractString,\n                                created_at::AbstractString,\n                                as_of::AbstractString,\n                                node)\n\nIt inserts each record to the universe.github_repos table.\n\n\n\n\n\n","category":"function"},{"location":"private_api/#GitHubAPI.insert_commit!","page":"Private API","title":"GitHubAPI.insert_commit!","text":"insert_commit!(conn::Connection, slug::AbstractString, node)\n\nIt inserts each record to the universe.github_commits table.\n\n\n\n\n\n","category":"function"},{"location":"private_api/#GitHub-API-1","page":"Private API","title":"GitHub API","text":"","category":"section"},{"location":"private_api/#","page":"Private API","title":"Private API","text":"GitHubAPI.github_endpoint\nGitHubAPI.github_login\nGitHubAPI.github_header\nGitHubAPI.client\nGitHubAPI.github_api_query\nGitHubAPI.until\nGitHubAPI.binary_search_dt_interval\nGitHubAPI.github_wait_out\nGitHubAPI.response_dtf\nGitHubAPI.github_dtf\nGitHubAPI.get_as_of","category":"page"},{"location":"private_api/#GitHubAPI.github_endpoint","page":"Private API","title":"GitHubAPI.github_endpoint","text":"github_endpoint = \"https://api.github.com/graphql\"\n\nEndpoint for the GitHub API v4 (GraphQL).\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.github_login","page":"Private API","title":"GitHubAPI.github_login","text":"github_login::String\n\nYour GitHub handle.\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.github_header","page":"Private API","title":"GitHubAPI.github_header","text":"github_header = Dict(\"User-Agent\" => github_login)\n\nHeader for the GitHub API.\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.client","page":"Private API","title":"GitHubAPI.client","text":"client = GraphQLClient(github_endpoint,\n                       auth = \"bearer c4dd1bf8c18094fd3da05ba92453fdbb1489ea95\",\n                       headers = github_header)\n\nClient for the GitHub API.\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.github_api_query","page":"Private API","title":"GitHubAPI.github_api_query","text":"github_api_query::String\n\nQueries for finding open-sourced projects and their commit information from GitHub.\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.until","page":"Private API","title":"GitHubAPI.until","text":"until::ZonedDateTime\n\nUntil when should the scrapper query data. Currently at \"2019-08-15T00:00:00-04:00\".\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.binary_search_dt_interval","page":"Private API","title":"GitHubAPI.binary_search_dt_interval","text":"binary_search_dt_interval(license::AbstractString,\n                          interval::AbstractString)::data, as_of, created_at\n\nGiven a license and a datetime interval, it will use binary search to find a datetime interval with no more than 1,000 results.\n\n\n\n\n\n","category":"function"},{"location":"private_api/#GitHubAPI.github_wait_out","page":"Private API","title":"GitHubAPI.github_wait_out","text":"github_wait_out(rateLimit)\n\nIf the GitHub personal access token has exhausted the per hour limit, it waits until it resets.\n\n\n\n\n\n","category":"function"},{"location":"private_api/#GitHubAPI.response_dtf","page":"Private API","title":"GitHubAPI.response_dtf","text":"response_dtf = dateformat\"d u y H:M:S Z\"\n\nHTTP responses require this datetime format.\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.github_dtf","page":"Private API","title":"GitHubAPI.github_dtf","text":"github_dtf = \"yyyy-mm-ddTHH:MM:SSzzzz\"\n\nGitHub zoned datetime format.\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#GitHubAPI.get_as_of","page":"Private API","title":"GitHubAPI.get_as_of","text":"get_as_of(response::Response)::String\n\nReturns the zoned date time when the response was returned.\n\n\n\n\n\n","category":"function"},{"location":"#GitHubAPI.jl-1","page":"Introduction","title":"GitHubAPI.jl","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Author/Maintainer: JosÃ© BayoÃ¡n Santiago CalderÃ³n (Nosferican)","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"This application is developed by the Social and Decision Analytics Division of the Biocomplexity Institute and Initiative, University of Virginia.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"GitHubAPI.jl is an application to collect GitHub data on open-source projects (i.e., commit data for repositories with OSI-approved licenses).","category":"page"},{"location":"#Prerequisites-1","page":"Introduction","title":"Prerequisites","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Julia\nInternet access\nAccess to the SDAD postgis_1/oss database (contact Aaron Schroeder)\nA GitHub account\nA GitHub personal access token","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"warning: Warning\nCurrently the application assumes one is working locally. This will change once the containers are set up.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Check out the Public API section for documentation on how to use the application.\nThe Private API (Internals) provide useful information, but is not required for usage.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"note: Note\nWhile the application is meant for internal use. The code is ISC licensed and may be useful for other people. Do feel free to fork the project / re-use the code for your purposes.","category":"page"}]
}
